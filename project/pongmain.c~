#include <msp430.h>
#include <libTimer.h>
#include "lcdutils.h"
#include "lcddraw.h"

// Definitions for switches
#define SW1 1
#define SW2 2
#define SW3 4
#define SW4 8
#define SWITCHES 15

// Paddle variables
short paddlePos = screenHeight / 2;  // Paddle position (row)
short paddleHeight = 10;            // Paddle height

// Ball variables
short ballPos[2] = {screenWidth / 2, screenHeight / 2};  // Ball position (col, row)
short ballVelocity[2] = {1, 1};                          // Ball velocity (col, row)

// Game state
int score = 0;
char gamePaused = 0;

// Function Prototypes
void drawPaddle(short row, u_int color);
void drawBall(short col, short row, u_int color);
void update_shape();
void switch_interrupt_handler();
void wdt_c_handler();

// Switch handling
static char switch_update_interrupt_sense() {
  char p2val = P2IN;
  P2IES |= (p2val & SWITCHES);  // Detect falling edge
  P2IES &= (p2val | ~SWITCHES); // Detect rising edge
  return p2val;
}

void switch_init() {
  P2REN |= SWITCHES;  // Enable resistors for switches
  P2IE |= SWITCHES;   // Enable interrupts for switches
  P2OUT |= SWITCHES;  // Pull-ups for switches
  P2DIR &= ~SWITCHES; // Set switches as input
  switch_update_interrupt_sense();
}

int switches = 0;

// Drawing functions
void drawPaddle(short row, u_int color) {
  fillRectangle(5, row - paddleHeight / 2, 2, paddleHeight, color);
}

void drawBall(short col, short row, u_int color) {
  fillRectangle(col - 1, row - 1, 3, 3, color);
}

// Screen update function
void update_shape() {
  static short lastPaddlePos = -1;
  static short lastBallPos[2] = {-1, -1};

  // Erase old paddle and ball
  if (lastPaddlePos != -1) drawPaddle(lastPaddlePos, COLOR_BLUE);
  if (lastBallPos[0] != -1) drawBall(lastBallPos[0], lastBallPos[1], COLOR_BLUE);

  // Draw new paddle and ball
  drawPaddle(paddlePos, COLOR_WHITE);
  drawBall(ballPos[0], ballPos[1], COLOR_RED);

  // Display score
  char scoreStr[5];
  sprintf(scoreStr, "%d", score);
  drawString5x7(screenWidth - 20, 5, scoreStr, COLOR_GREEN, COLOR_BLUE);

  // Update last positions
  lastPaddlePos = paddlePos;
  lastBallPos[0] = ballPos[0];
  lastBallPos[1] = ballPos[1];
}

// Interrupt handler for switches
void switch_interrupt_handler() {
  char p2val = switch_update_interrupt_sense();
  switches = ~p2val & SWITCHES;

  if (switches & SW1 && paddlePos > paddleHeight / 2) {
    paddlePos--;  // Move paddle up
  }

  if (switches & SW2 && paddlePos < screenHeight - paddleHeight / 2) {
    paddlePos++;  // Move paddle down
  }

  if (switches & SW3) {
    gamePaused = 0;  // Start or resume the game
    score = 0;       // Reset score
    ballPos[0] = screenWidth / 2;  // Reset ball position
    ballPos[1] = screenHeight / 2;
    ballVelocity[0] = 1;
    ballVelocity[1] = 1;
  }

  if (switches & SW4) {
    gamePaused = !gamePaused;  // Toggle pause state
  }
}

// Watchdog Timer interrupt handler
void wdt_c_handler() {
  static int frameCount = 0;

  if (gamePaused) return;  // Do nothing if the game is paused

  frameCount++;
  if (frameCount >= 10) {  // Adjust speed
    frameCount = 0;

    // Update ball position
    short newCol = ballPos[0] + ballVelocity[0];
    short newRow = ballPos[1] + ballVelocity[1];

    // Ball collision with top/bottom walls
    if (newRow <= 1 || newRow >= screenHeight - 1) {
      ballVelocity[1] = -ballVelocity[1];
    }

    // Ball collision with paddle
    if (newCol <= 7 && newRow >= paddlePos - paddleHeight / 2 && newRow <= paddlePos + paddleHeight / 2) {
      ballVelocity[0] = -ballVelocity[0];  // Reverse horizontal direction
      score++;  // Increment score
    }

    // Ball out of bounds
    if (newCol <= 0) {
      gamePaused = 1;  // Pause the game
      return;
    }

    // Update ball position
    ballPos[0] = newCol;
    ballPos[1] = newRow;
  }
}

// Main function
void main() {
  configureClocks();
  lcd_init();
  switch_init();
  enableWDTInterrupts();  // Enable periodic interrupts

  clearScreen(COLOR_BLUE);

  while (1) {
    if (!gamePaused) {
      update_shape();
    }
    P1OUT &= ~BIT6;  // Turn off LED
    or_sr(0x10);     // Enter low-power mode
    P1OUT |= BIT6;   // Turn on LED
  }
}

// Port 2 interrupt handler
void __interrupt_vec(PORT2_VECTOR) Port_2() {
  if (P2IFG & SWITCHES) {  // Did a button cause this interrupt?
    P2IFG &= ~SWITCHES;    // Clear pending switch interrupts
    switch_interrupt_handler();  // Handle the switch press
  }
}
